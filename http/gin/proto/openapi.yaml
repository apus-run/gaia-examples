# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: UserService API
    version: 0.0.1
paths:
    /v1/auth/login:
        post:
            tags:
                - UserService
            operationId: UserService_Login
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginReply'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/auth/logout:
        post:
            tags:
                - UserService
            operationId: UserService_Logout
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LogoutRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LogoutReply'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/auth/register:
        post:
            tags:
                - UserService
            description: auth
            operationId: UserService_Register
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RegisterRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RegisterReply'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/users:
        get:
            tags:
                - UserService
            operationId: UserService_ListUsers
            parameters:
                - name: page
                  in: query
                  description: '@gotags: form:"page"'
                  schema:
                    type: integer
                    format: int64
                - name: limit
                  in: query
                  description: '@gotags: form:"limit"'
                  schema:
                    type: integer
                    format: int64
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListUserReply'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/users/password/{id}:
        patch:
            tags:
                - UserService
            operationId: UserService_UpdatePassword
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdatePasswordRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdatePasswordReply'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/users/{id}:
        get:
            tags:
                - UserService
            description: user
            operationId: UserService_GetUser
            parameters:
                - name: id
                  in: path
                  description: '@gotags: uri:"id"'
                  required: true
                  schema:
                    type: integer
                    format: int64
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetUserReply'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        put:
            tags:
                - UserService
            operationId: UserService_UpdateUser
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateUserRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateUserReply'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        GetUserReply:
            type: object
            properties:
                user:
                    $ref: '#/components/schemas/User'
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        ListUserReply:
            type: object
            properties:
                users:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                page:
                    type: integer
                    format: int64
                limit:
                    type: integer
                    format: int64
                total:
                    type: integer
                    format: int64
        LoginReply:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                token:
                    type: string
        LoginRequest:
            type: object
            properties:
                username:
                    type: string
                email:
                    type: string
                password:
                    type: string
        LogoutReply:
            type: object
            properties: {}
        LogoutRequest:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                token:
                    type: string
        RegisterReply:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                username:
                    type: string
        RegisterRequest:
            type: object
            properties:
                username:
                    type: string
                email:
                    type: string
                password:
                    type: string
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        UpdatePasswordReply:
            type: object
            properties: {}
        UpdatePasswordRequest:
            type: object
            properties:
                userId:
                    type: integer
                    format: int64
                password:
                    type: string
        UpdateUserReply:
            type: object
            properties: {}
        UpdateUserRequest:
            type: object
            properties:
                userId:
                    type: integer
                    format: int64
                username:
                    type: string
                email:
                    type: string
                phone:
                    type: string
                loginAt:
                    type: integer
                    format: int64
                status:
                    type: integer
                    format: enum
                nickname:
                    type: string
                avatar:
                    type: string
                gender:
                    type: integer
                    format: enum
                birthday:
                    type: string
                bio:
                    type: string
                updatedAt:
                    type: integer
                    format: int64
        User:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                username:
                    type: string
                email:
                    type: string
                phone:
                    type: string
                loginAt:
                    type: integer
                    format: int64
                status:
                    type: integer
                    format: enum
                nickname:
                    type: string
                avatar:
                    type: string
                gender:
                    type: integer
                    format: enum
                birthday:
                    type: string
                bio:
                    type: string
                createdAt:
                    type: integer
                    format: int64
                updatedAt:
                    type: integer
                    format: int64
            description: user info
tags:
    - name: UserService
